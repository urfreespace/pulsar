"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[39939],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85560:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={id:"functions-state",title:"Pulsar Functions State Storage (Developer Preview)",sidebar_label:"State Storage",original_id:"functions-state"},u=void 0,s={unversionedId:"functions-state",id:"version-2.4.0/functions-state",isDocsHomePage:!1,title:"Pulsar Functions State Storage (Developer Preview)",description:"Since Pulsar 2.1.0 release, Pulsar integrates with Apache BookKeeper table service",source:"@site/versioned_docs/version-2.4.0/functions-state.md",sourceDirName:".",slug:"/functions-state",permalink:"/docs/2.4.0/functions-state",editUrl:"https://github.com/apache/pulsar/edit/master/site2/website-next/versioned_docs/version-2.4.0/functions-state.md",tags:[],version:"2.4.0",frontMatter:{id:"functions-state",title:"Pulsar Functions State Storage (Developer Preview)",sidebar_label:"State Storage",original_id:"functions-state"},sidebar:"version-2.4.0/docsSidebar",previous:{title:"Processing guarantees",permalink:"/docs/2.4.0/functions-guarantees"},next:{title:"Metrics",permalink:"/docs/2.4.0/functions-metrics"}},p=[{value:"API",id:"api",children:[{value:"Java API",id:"java-api",children:[{value:"incrCounter",id:"incrcounter",children:[],level:4},{value:"incrCounterAsync",id:"incrcounterasync",children:[],level:4},{value:"getCounter",id:"getcounter",children:[],level:4},{value:"getCounterAsync",id:"getcounterasync",children:[],level:4},{value:"putState",id:"putstate",children:[],level:4},{value:"putStateAsync",id:"putstateasync",children:[],level:4},{value:"getState",id:"getstate",children:[],level:4},{value:"getStateAsync",id:"getstateasync",children:[],level:4}],level:3},{value:"Python API",id:"python-api",children:[],level:3}],level:2},{value:"Query State",id:"query-state",children:[],level:2},{value:"Example",id:"example",children:[{value:"Java Example",id:"java-example",children:[],level:3},{value:"Python Example",id:"python-example",children:[],level:3}],level:2}],c={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Since Pulsar 2.1.0 release, Pulsar integrates with Apache BookKeeper ",(0,o.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/155xAwWv5IdOitHh1NVMEwCMGgB28M3FyMiQSxEpjE-Y/edit#heading=h.56rbh52koe3f"},"table service"),"\nfor storing the ",(0,o.kt)("inlineCode",{parentName:"p"},"State")," for functions. For example, A ",(0,o.kt)("inlineCode",{parentName:"p"},"WordCount")," function can store its ",(0,o.kt)("inlineCode",{parentName:"p"},"counters")," state into BookKeeper's table service via Pulsar Functions ",(0,o.kt)("a",{parentName:"p",href:"#api"},"State API"),"."),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"java-api"},"Java API"),(0,o.kt)("p",null,"Currently Pulsar Functions expose following APIs for mutating and accessing State. These APIs are available in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#context"},"Context")," object when\nyou are using ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#java-sdk-functions"},"Java SDK")," functions."),(0,o.kt)("h4",{id:"incrcounter"},"incrCounter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Increment the builtin distributed counter referred by key\n     * @param key The name of the key\n     * @param amount The amount to be incremented\n     */\n    void incrCounter(String key, long amount);\n\n")),(0,o.kt)("p",null,"The application can use ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounter")," to change the counter of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," by the given ",(0,o.kt)("inlineCode",{parentName:"p"},"amount"),"."),(0,o.kt)("h4",{id:"incrcounterasync"},"incrCounterAsync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n     /**\n     * Increment the builtin distributed counter referred by key\n     * but dont wait for the completion of the increment operation\n     *\n     * @param key The name of the key\n     * @param amount The amount to be incremented\n     */\n    CompletableFuture<Void> incrCounterAsync(String key, long amount);\n\n")),(0,o.kt)("p",null,"The application can use ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounterAsync")," to asynchronously change the counter of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," by the given ",(0,o.kt)("inlineCode",{parentName:"p"},"amount"),"."),(0,o.kt)("h4",{id:"getcounter"},"getCounter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Retrieve the counter value for the key.\n     *\n     * @param key name of the key\n     * @return the amount of the counter value for this key\n     */\n    long getCounter(String key);\n\n")),(0,o.kt)("p",null,"The application can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getCounter")," to retrieve the counter of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," mutated by ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounter"),"."),(0,o.kt)("p",null,"Besides the ",(0,o.kt)("inlineCode",{parentName:"p"},"counter")," API, Pulsar also exposes a general key/value API for functions to store\ngeneral key/value state."),(0,o.kt)("h4",{id:"getcounterasync"},"getCounterAsync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n     /**\n     * Retrieve the counter value for the key, but don't wait\n     * for the operation to be completed\n     *\n     * @param key name of the key\n     * @return the amount of the counter value for this key\n     */\n    CompletableFuture<Long> getCounterAsync(String key);\n\n")),(0,o.kt)("p",null,"The application can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getCounterAsync")," to asynchronously retrieve the counter of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," mutated by ",(0,o.kt)("inlineCode",{parentName:"p"},"incrCounterAsync"),"."),(0,o.kt)("h4",{id:"putstate"},"putState"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Update the state value for the key.\n     *\n     * @param key name of the key\n     * @param value state value of the key\n     */\n    void putState(String key, ByteBuffer value);\n\n")),(0,o.kt)("h4",{id:"putstateasync"},"putStateAsync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Update the state value for the key, but don't wait for the operation to be completed\n     *\n     * @param key name of the key\n     * @param value state value of the key\n     */\n    CompletableFuture<Void> putStateAsync(String key, ByteBuffer value);\n\n")),(0,o.kt)("p",null,"The application can use ",(0,o.kt)("inlineCode",{parentName:"p"},"putStateAsync")," to asynchronously update the state of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,o.kt)("h4",{id:"getstate"},"getState"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n    /**\n     * Retrieve the state value for the key.\n     *\n     * @param key name of the key\n     * @return the state value for the key.\n     */\n    ByteBuffer getState(String key);\n\n")),(0,o.kt)("h4",{id:"getstateasync"},"getStateAsync"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Retrieve the state value for the key, but don't wait for the operation to be completed\n     *\n     * @param key name of the key\n     * @return the state value for the key.\n     */\n    CompletableFuture<ByteBuffer> getStateAsync(String key);\n\n")),(0,o.kt)("p",null,"The application can use ",(0,o.kt)("inlineCode",{parentName:"p"},"getStateAsync")," to asynchronously retrieve the state of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"key"),"."),(0,o.kt)("h3",{id:"python-api"},"Python API"),(0,o.kt)("p",null,"State currently is not supported at ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#python-sdk-functions"},"Python SDK"),"."),(0,o.kt)("h2",{id:"query-state"},"Query State"),(0,o.kt)("p",null,"A Pulsar Function can use the ",(0,o.kt)("a",{parentName:"p",href:"#api"},"State API")," for storing state into Pulsar's state storage\nand retrieving state back from Pulsar's state storage. Additionally Pulsar also provides\nCLI commands for querying its state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"\n$ bin/pulsar-admin functions querystate \\\n    --tenant <tenant> \\\n    --namespace <namespace> \\\n    --name <function-name> \\\n    --state-storage-url <bookkeeper-service-url> \\\n    --key <state-key> \\\n    [---watch]\n\n")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"--watch")," is specified, the CLI will watch the value of the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"state-key"),"."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("h3",{id:"java-example"},"Java Example"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/pulsar/tree/master//pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/WordCountFunction.java"},"WordCountFunction")," is a very good example\ndemonstrating on how Application can easily store ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," in Pulsar Functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\npublic class WordCountFunction implements Function<String, Void> {\n    @Override\n    public Void process(String input, Context context) throws Exception {\n        Arrays.asList(input.split("\\\\.")).forEach(word -> context.incrCounter(word, 1));\n        return null;\n    }\n}\n\n')),(0,o.kt)("p",null,"The logic of this ",(0,o.kt)("inlineCode",{parentName:"p"},"WordCount")," function is pretty simple and straightforward:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The function first splits the received ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," into multiple words using regex ",(0,o.kt)("inlineCode",{parentName:"li"},"\\\\."),"."),(0,o.kt)("li",{parentName:"ol"},"For each ",(0,o.kt)("inlineCode",{parentName:"li"},"word"),", the function increments the corresponding ",(0,o.kt)("inlineCode",{parentName:"li"},"counter")," by 1 (via ",(0,o.kt)("inlineCode",{parentName:"li"},"incrCounter(key, amount)"),").")),(0,o.kt)("h3",{id:"python-example"},"Python Example"),(0,o.kt)("p",null,"State currently is not supported at ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.4.0/functions-api#python-sdk-functions"},"Python SDK"),"."))}d.isMDXComponent=!0}}]);