"use strict";(self.webpackChunkwebsite_next=self.webpackChunkwebsite_next||[]).push([[77190],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return k}});var l=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,l,a=function(t,e){if(null==t)return{};var n,l,a={},r=Object.keys(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(l=0;l<r.length;l++)n=r[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var o=l.createContext({}),p=function(t){var e=l.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=p(t.components);return l.createElement(o.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},s=l.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,o=t.parentName,d=u(t,["components","mdxType","originalType","parentName"]),s=p(n),k=a,c=s["".concat(o,".").concat(k)]||s[k]||m[k]||r;return n?l.createElement(c,i(i({ref:e},d),{},{components:n})):l.createElement(c,i({ref:e},d))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=s;var u={};for(var o in e)hasOwnProperty.call(e,o)&&(u[o]=e[o]);u.originalType=t,u.mdxType="string"==typeof t?t:a,i[1]=u;for(var p=2;p<r;p++)i[p]=n[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}s.displayName="MDXCreateElement"},58215:function(t,e,n){var l=n(67294);e.Z=function(t){var e=t.children,n=t.hidden,a=t.className;return l.createElement("div",{role:"tabpanel",hidden:n,className:a},e)}},26396:function(t,e,n){n.d(e,{Z:function(){return s}});var l=n(87462),a=n(67294),r=n(72389),i=n(79443);var u=function(){var t=(0,a.useContext)(i.Z);if(null==t)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return t},o=n(89521),p=n(86010),d="tabItem_vU9c";function m(t){var e,n,l,r=t.lazy,i=t.block,m=t.defaultValue,s=t.values,k=t.groupId,c=t.className,g=a.Children.map(t.children,(function(t){if((0,a.isValidElement)(t)&&void 0!==t.props.value)return t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof t.type?t.type:t.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=s?s:g.map((function(t){var e=t.props;return{value:e.value,label:e.label}})),N=(0,o.lx)(f,(function(t,e){return t.value===e.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(t){return t.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(e=null!=m?m:null==(n=g.find((function(t){return t.props.default})))?void 0:n.props.value)?e:null==(l=g[0])?void 0:l.props.value;if(null!==b&&!f.some((function(t){return t.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((function(t){return t.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=u(),v=h.tabGroupChoices,x=h.setTabGroupChoices,y=(0,a.useState)(b),D=y[0],E=y[1],T=[],w=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var I=v[k];null!=I&&I!==D&&f.some((function(t){return t.value===I}))&&E(I)}var B=function(t){var e=t.currentTarget,n=T.indexOf(e),l=f[n].value;l!==D&&(w(e),E(l),null!=k&&x(k,l))},O=function(t){var e,n=null;switch(t.key){case"ArrowRight":var l=T.indexOf(t.currentTarget)+1;n=T[l]||T[0];break;case"ArrowLeft":var a=T.indexOf(t.currentTarget)-1;n=T[a]||T[T.length-1]}null==(e=n)||e.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":i},c)},f.map((function(t){var e=t.value,n=t.label;return a.createElement("li",{role:"tab",tabIndex:D===e?0:-1,"aria-selected":D===e,className:(0,p.Z)("tabs__item",d,{"tabs__item--active":D===e}),key:e,ref:function(t){return T.push(t)},onKeyDown:O,onFocus:B,onClick:B},null!=n?n:e)}))),r?(0,a.cloneElement)(g.filter((function(t){return t.props.value===D}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},g.map((function(t,e){return(0,a.cloneElement)(t,{key:e,hidden:t.props.value!==D})}))))}function s(t){var e=(0,r.Z)();return a.createElement(m,(0,l.Z)({key:String(e)},t))}},79443:function(t,e,n){var l=(0,n(67294).createContext)(void 0);e.Z=l},32608:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return u},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return d},default:function(){return s}});var l=n(87462),a=n(63366),r=(n(67294),n(3905)),i=(n(26396),n(58215),["components"]),u={id:"io-influxdb-sink",title:"InfluxDB sink connector",sidebar_label:"InfluxDB sink connector",original_id:"io-influxdb-sink"},o=void 0,p={unversionedId:"io-influxdb-sink",id:"version-2.7.0/io-influxdb-sink",isDocsHomePage:!1,title:"InfluxDB sink connector",description:"The InfluxDB sink connector pulls messages from Pulsar topics",source:"@site/versioned_docs/version-2.7.0/io-influxdb-sink.md",sourceDirName:".",slug:"/io-influxdb-sink",permalink:"/docs/2.7.0/io-influxdb-sink",editUrl:"https://github.com/apache/pulsar/edit/master/site2/website-next/versioned_docs/version-2.7.0/io-influxdb-sink.md",tags:[],version:"2.7.0",frontMatter:{id:"io-influxdb-sink",title:"InfluxDB sink connector",sidebar_label:"InfluxDB sink connector",original_id:"io-influxdb-sink"}},d=[{value:"Configuration",id:"configuration",children:[{value:"Property",id:"property",children:[{value:"InfluxDBv2",id:"influxdbv2",children:[],level:4},{value:"InfluxDBv1",id:"influxdbv1",children:[],level:4}],level:3},{value:"Example",id:"example",children:[{value:"InfluxDBv2",id:"influxdbv2-1",children:[],level:4},{value:"InfluxDBv1",id:"influxdbv1-1",children:[],level:4}],level:3}],level:2}],m={toc:d};function s(t){var e=t.components,n=(0,a.Z)(t,i);return(0,r.kt)("wrapper",(0,l.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The InfluxDB sink connector pulls messages from Pulsar topics\nand persists the messages to InfluxDB."),(0,r.kt)("p",null,"The InfluxDB sink provides different configurations for InfluxDBv1 and v2 respectively."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"The configuration of the InfluxDB sink connector has the following properties."),(0,r.kt)("h3",{id:"property"},"Property"),(0,r.kt)("h4",{id:"influxdbv2"},"InfluxDBv2"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"influxdbUrl")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The URL of the InfluxDB instance.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"token")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The authentication token used to authenticate to InfluxDB.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"organization")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The InfluxDB organization to write to.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bucket")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The InfluxDB bucket to write to.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"precision")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"ns"),(0,r.kt)("td",{parentName:"tr",align:null},"The timestamp precision for writing data to InfluxDB. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Below are the available options:",(0,r.kt)("li",null,"ns",(0,r.kt)("br",null)),(0,r.kt)("li",null,"us",(0,r.kt)("br",null)),(0,r.kt)("li",null,"ms",(0,r.kt)("br",null)),(0,r.kt)("li",null,"s"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"logLevel")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"NONE"),(0,r.kt)("td",{parentName:"tr",align:null},"The log level for InfluxDB request and response. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Below are the available options:",(0,r.kt)("li",null,"NONE",(0,r.kt)("br",null)),(0,r.kt)("li",null,"BASIC",(0,r.kt)("br",null)),(0,r.kt)("li",null,"HEADERS",(0,r.kt)("br",null)),(0,r.kt)("li",null,"FULL"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gzipEnable")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to enable gzip or not.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"batchTimeMs")),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"1000L"),(0,r.kt)("td",{parentName:"tr",align:null},"The InfluxDB operation time in milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"batchSize")),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},"The batch size of writing to InfluxDB.")))),(0,r.kt)("h4",{id:"influxdbv1"},"InfluxDBv1"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"influxdbUrl")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The URL of the InfluxDB instance.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"username")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The username used to authenticate to InfluxDB.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"password")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The password used to authenticate to InfluxDB.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"database")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},'" " (empty string)'),(0,r.kt)("td",{parentName:"tr",align:null},"The InfluxDB to which write messages.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"consistencyLevel")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"ONE"),(0,r.kt)("td",{parentName:"tr",align:null},"The consistency level for writing data to InfluxDB. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Below are the available options:",(0,r.kt)("li",null,"ALL",(0,r.kt)("br",null)),(0,r.kt)("li",null," ANY",(0,r.kt)("br",null)),(0,r.kt)("li",null,"ONE",(0,r.kt)("br",null)),(0,r.kt)("li",null,"QUORUM "))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"logLevel")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"NONE"),(0,r.kt)("td",{parentName:"tr",align:null},"The log level for InfluxDB request and response. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Below are the available options:",(0,r.kt)("li",null,"NONE",(0,r.kt)("br",null)),(0,r.kt)("li",null,"BASIC",(0,r.kt)("br",null)),(0,r.kt)("li",null,"HEADERS",(0,r.kt)("br",null)),(0,r.kt)("li",null,"FULL"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"retentionPolicy")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"autogen"),(0,r.kt)("td",{parentName:"tr",align:null},"The retention policy for InfluxDB.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gzipEnable")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to enable gzip or not.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"batchTimeMs")),(0,r.kt)("td",{parentName:"tr",align:null},"long"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"1000L"),(0,r.kt)("td",{parentName:"tr",align:null},"The InfluxDB operation time in milliseconds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"batchSize")),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},"The batch size of writing to InfluxDB.")))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"Before using the InfluxDB sink connector, you need to create a configuration file through one of the following methods."),(0,r.kt)("h4",{id:"influxdbv2-1"},"InfluxDBv2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JSON"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n    "influxdbUrl": "http://localhost:9999",\n    "organization": "example-org",\n    "bucket": "example-bucket",\n    "token": "xxxx",\n    "precision": "ns",\n    "logLevel": "NONE",\n    "gzipEnable": false,\n    "batchTimeMs": 1000,\n    "batchSize": 100\n}\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"YAML"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\nconfigs:\n    influxdbUrl: "http://localhost:9999"\n    organization: "example-org"\n    bucket: "example-bucket"\n    token: "xxxx"\n    precision: "ns"\n    logLevel: "NONE"\n    gzipEnable: false\n    batchTimeMs: 1000\n    batchSize: 100\n\n')))),(0,r.kt)("h4",{id:"influxdbv1-1"},"InfluxDBv1"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"JSON "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n    "influxdbUrl": "http://localhost:8086",\n    "database": "test_db",\n    "consistencyLevel": "ONE",\n    "logLevel": "NONE",\n    "retentionPolicy": "autogen",\n    "gzipEnable": false,\n    "batchTimeMs": 1000,\n    "batchSize": 100\n}\n\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"YAML"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'\nconfigs:\n    influxdbUrl: "http://localhost:8086"\n    database: "test_db"\n    consistencyLevel: "ONE"\n    logLevel: "NONE"\n    retentionPolicy: "autogen"\n    gzipEnable: false\n    batchTimeMs: 1000\n    batchSize: 100\n\n')))))}s.isMDXComponent=!0}}]);